"use strict";(self.webpackChunkflutter_news_toolkit_docs=self.webpackChunkflutter_news_toolkit_docs||[]).push([[162],{1917:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"server_development/blocks","title":"Working with blocks","description":"Learn how to work with blocks to customize your news content.","source":"@site/docs/server_development/blocks.md","sourceDirName":"server_development","slug":"/server_development/blocks","permalink":"/news_toolkit/server_development/blocks","draft":false,"unlisted":false,"editUrl":"https://github.com/flutter/news_toolkit/tree/main/docs/docs/server_development/blocks.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4,"description":"Learn how to work with blocks to customize your news content."},"sidebar":"tutorialSidebar","previous":{"title":"Testing","permalink":"/news_toolkit/server_development/testing"},"next":{"title":"Creating a newsletter","permalink":"/news_toolkit/server_development/newsletter"}}');var s=o(4848),r=o(8453);const i={sidebar_position:4,description:"Learn how to work with blocks to customize your news content."},a="Working with blocks",c={},d=[{value:"What are blocks?",id:"what-are-blocks",level:2},{value:"Using blocks",id:"using-blocks",level:2},{value:"Customizing blocks",id:"customizing-blocks",level:2}];function l(e){const t={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",img:"img",p:"p",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"working-with-blocks",children:"Working with blocks"})}),"\n",(0,s.jsx)(t.h2,{id:"what-are-blocks",children:"What are blocks?"}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsxs)(t.em,{children:["Note: ",(0,s.jsx)(t.code,{children:"blocks"})," are distinct from ",(0,s.jsx)(t.a,{href:"https://bloclibrary.dev/#/",children:(0,s.jsx)(t.code,{children:"blocs"})}),", which are also used in this application."]})}),"\n",(0,s.jsxs)(t.p,{children:["Blocks are the data format used by the Flutter News Template to ensure that a variety of news content can be displayed in a consistent manner. The client application expects to receive data from the server in a block-based format. For example, the ",(0,s.jsx)(t.code,{children:"Article"})," model class contains a list of blocks."]}),"\n",(0,s.jsx)(t.p,{children:"These blocks contain the data that the app requires to render a corresponding widget."}),"\n",(0,s.jsxs)(t.p,{children:["As described in ",(0,s.jsx)(t.a,{href:"/server_development/connecting_your_data_source#implementing-your-data-source",children:"Implementing an API data source"}),", your backend is responsible for transforming data from your CMS into the block-based format expected by the app. The app then displays the data according to its own internal rendering rules."]}),"\n",(0,s.jsx)(t.p,{children:"The following diagram provides an overview of how blocks are used in the example template application:"}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{src:"https://user-images.githubusercontent.com/61138206/192628148-e1af73e4-4b81-4dff-8926-c411294b4b86.png",alt:"block-diagram"})}),"\n",(0,s.jsxs)(t.p,{children:["In this example, data from the CMS is transformed by the Dart Frog server into a ",(0,s.jsx)(t.code,{children:"PostLargeBlock"})," to respond to a request from the app. The ",(0,s.jsx)(t.code,{children:"CategoryFeed"})," widget receives the data from the app's ",(0,s.jsx)(t.code,{children:"FeedBloc"})," and gives the ",(0,s.jsx)(t.code,{children:"PostLargeBlock"})," to a newly-constructed ",(0,s.jsx)(t.code,{children:"PostLarge"})," widget to dictate what data the widget should render on-screen."]}),"\n",(0,s.jsx)(t.h2,{id:"using-blocks",children:"Using blocks"}),"\n",(0,s.jsxs)(t.p,{children:["You can view the relationship between blocks and their corresponding widgets in ",(0,s.jsx)(t.code,{children:"lib/article/widgets/article_content_item.dart"})," and ",(0,s.jsx)(t.code,{children:"lib/article/widgets/category_feed_item.dart"})," files."]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.code,{children:"ArticleContentItem"})," specifies how a block is rendered inside an article view, while ",(0,s.jsx)(t.code,{children:"CategoryFeedItem"})," specifies how a block is rendered inside the feed view. Both classes also provide callbacks to widgets that exhibit behavior on an interaction, such as a press or tap by the user. Look through those files to review the available blocks that can feed into your app out of the box."]}),"\n",(0,s.jsxs)(t.p,{children:["Note that if your CMS returns content in an HTML format, you might want to segment your articles and provide it to the app inside an ",(0,s.jsx)(t.code,{children:"HtmlBlock"}),", which renders the content inside an ",(0,s.jsx)(t.a,{href:"https://pub.dev/packages/flutter_html",children:(0,s.jsx)(t.code,{children:"Html"})})," widget. Styling for HTML content is covered in the ",(0,s.jsx)(t.a,{href:"/flutter_development/theming#typography",children:"Updating the app typography"})," section of this document."]}),"\n",(0,s.jsxs)(t.p,{children:["Also note that many block files have an additional ",(0,s.jsx)(t.code,{children:".g"})," file in the same folder which shares its name. For example, there is both ",(0,s.jsx)(t.code,{children:"banner_ad_block.dart"})," and ",(0,s.jsx)(t.code,{children:"banner_ad_block.g.dart"}),". The ",(0,s.jsx)(t.code,{children:".g"})," file contains generated code to support functionality such as JSON serialization. When you change any file with associated generated code, ",(0,s.jsx)(t.a,{href:"https://docs.flutter.dev/development/data-and-backend/json#running-the-code-generation-utility",children:"make sure code generation runs and is kept up-to-date with your source code content"}),"."]}),"\n",(0,s.jsx)(t.h2,{id:"customizing-blocks",children:"Customizing blocks"}),"\n",(0,s.jsx)(t.p,{children:"Blocks are the basic organizational components of your app's news content. Re-arranging the order of blocks allows you to control how and where your content is displayed."}),"\n",(0,s.jsx)(t.p,{children:"Block organization typically occurs within your API and is then served to your app."}),"\n",(0,s.jsxs)(t.p,{children:["Reference the ",(0,s.jsx)(t.code,{children:"article_content_item.dart"})," and ",(0,s.jsx)(t.code,{children:"category_feed_item.dart"})," files to understand the relationship between blocks and their corresponding widgets."]}),"\n",(0,s.jsxs)(t.p,{children:["Placing ads is covered in the ",(0,s.jsx)(t.a,{href:"/flutter_development/ads#ads-placement",children:"Updating ads placement"})," section, but you might want to control the placement of other widgets such as the ",(0,s.jsx)(t.code,{children:"NewsletterBlock"}),", which allows a user to subscribe to a mailing list. One way to arrange a block is to edit your news data source implementation's ",(0,s.jsx)(t.code,{children:"getFeed"})," or ",(0,s.jsx)(t.code,{children:"getArticle"})," methods to insert a ",(0,s.jsx)(t.code,{children:"NewsletterBlock"})," at the 15th block in the returned list, for example. Use this same approach to introduce blocks (such as the ",(0,s.jsx)(t.code,{children:"DividerHorizontalBlock"}),", ",(0,s.jsx)(t.code,{children:"TextLeadParagraphBlock"}),", and the ",(0,s.jsx)(t.code,{children:"SpacerBlock"}),") into the feed of blocks that your app receives, all of which allows you to further customize the look and content of your app."]})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},8453:(e,t,o)=>{o.d(t,{R:()=>i,x:()=>a});var n=o(6540);const s={},r=n.createContext(s);function i(e){const t=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),n.createElement(r.Provider,{value:t},e.children)}}}]);